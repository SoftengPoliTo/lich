# Dockerfile usage
#
# The input directory must contain both the binary and the `lich.toml`
# configuration file, and it must be passed as volume to the `lich` directory
# of the docker container.
#
# Build image:
#
# docker build -t lich-alpine -f docker/Dockerfile-alpine .
#
# Run container:
#
# docker run -it --rm --privileged \
#            -v /path/on/host/to/your/input/directory:/lich lich-alpine

# Use latest stable version for `alpine` operating system.
#
# Alpine is a small and essential operating system.
FROM rust:alpine

# Set `/app` as working directory
WORKDIR /app

# Copy all files contained in the `lich` directory into this Docker image's
# working directory.
COPY . /app

# `powerstat` package is contained in the testing repository.
RUN echo "http://dl-cdn.alpinelinux.org/alpine/edge/testing" >> /etc/apk/repositories

# Install perf, powerstat, powertop, and valgrind.
#
# Bash package is necessary to make it work the other packages.
#
# musl-dev is necessary to build `lich` binary.
#
# Clean packages cache to free space.
RUN apk update && apk add --no-cache \
    perf \
    powerstat \
    powertop \
    valgrind \
    bash \
    musl-dev \
    && rm -rf /var/cache/apk/*

# Remove all useless files contained in the working directory.
RUN rm -rf LICENSE-MIT README.md docker/ input/linux

# Clean up old cargo builds
RUN cargo clean

# Build `lich` tool with release profile and `tracing` feature.
RUN cargo build --release --features tracing

# Specify a volume for produced data.
VOLUME /lich

# Command to run `lich` with the data contained in the `/lich` directory.
CMD cargo run --features tracing --release -- -c /lich
